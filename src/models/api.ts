/* tslint:disable */
/* eslint-disable */
/**
 * 포켓약사 API
 * 포켓약사 클라이언트 개발에 필요한 API를 제공합니다.
 *
 * The version of the OpenAPI document: 0.0.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface DetectionLogPageRes
 */
export interface DetectionLogPageRes {
  /**
   * 회원의 id
   * @type {number}
   * @memberof DetectionLogPageRes
   */
  memberId?: number;
  /**
   * 전체 촬영기록 개수
   * @type {number}
   * @memberof DetectionLogPageRes
   */
  total?: number;
  /**
   * 전체 페이지 개수
   * @type {number}
   * @memberof DetectionLogPageRes
   */
  totalPage?: number;
  /**
   * 현재 페이지 번호
   * @type {number}
   * @memberof DetectionLogPageRes
   */
  page: number;
  /**
   * 마지막 페이지 여부
   * @type {boolean}
   * @memberof DetectionLogPageRes
   */
  lastPage?: DetectionLogPageResLastPageEnum;
  /**
   * 촬영기록
   * @type {Array<DetectionLogRes>}
   * @memberof DetectionLogPageRes
   */
  detectionLogs: Array<DetectionLogRes>;
}

export const DetectionLogPageResLastPageEnum = {
  True: true,
  False: false,
} as const;

export type DetectionLogPageResLastPageEnum =
  (typeof DetectionLogPageResLastPageEnum)[keyof typeof DetectionLogPageResLastPageEnum];

/**
 * 촬영기록
 * @export
 * @interface DetectionLogRes
 */
export interface DetectionLogRes {
  /**
   * 촬영기록 id
   * @type {number}
   * @memberof DetectionLogRes
   */
  id: number;
  /**
   * 의약품의 id
   * @type {number}
   * @memberof DetectionLogRes
   */
  medicineId: number;
  /**
   * 의약품 이름
   * @type {string}
   * @memberof DetectionLogRes
   */
  medicineName: string;
  /**
   * 제약회사 이름
   * @type {string}
   * @memberof DetectionLogRes
   */
  medicineCompany: string;
  /**
   * 의약품 이미지 주소
   * @type {string}
   * @memberof DetectionLogRes
   */
  medicineImage: string;
  /**
   * 즐겨찾기 추가 시간
   * @type {string}
   * @memberof DetectionLogRes
   */
  createdAt: string;
  favorite: boolean;
}
/**
 *
 * @export
 * @interface FavoritePageRes
 */
export interface FavoritePageRes {
  /**
   * 회원의 id
   * @type {number}
   * @memberof FavoritePageRes
   */
  memberId?: number;
  /**
   * 전체 즐겨찾기 개수
   * @type {number}
   * @memberof FavoritePageRes
   */
  total?: number;
  /**
   * 전체 페이지 개수
   * @type {number}
   * @memberof FavoritePageRes
   */
  totalPage?: number;
  /**
   * 현재 페이지 번호
   * @type {number}
   * @memberof FavoritePageRes
   */
  page?: number;
  /**
   * 마지막 페이지 여부
   * @type {boolean}
   * @memberof FavoritePageRes
   */
  lastPage?: FavoritePageResLastPageEnum;
  /**
   * 촬영기록
   * @type {Array<FavoriteRes>}
   * @memberof FavoritePageRes
   */
  favorites: Array<FavoriteRes>;
}

export const FavoritePageResLastPageEnum = {
  True: true,
  False: false,
} as const;

export type FavoritePageResLastPageEnum =
  (typeof FavoritePageResLastPageEnum)[keyof typeof FavoritePageResLastPageEnum];

/**
 * 촬영기록
 * @export
 * @interface FavoriteRes
 */
export interface FavoriteRes {
  /**
   * 즐겨찾요 id
   * @type {number}
   * @memberof FavoriteRes
   */
  id: number;
  /**
   * 의약품의 id
   * @type {number}
   * @memberof FavoriteRes
   */
  medicineId: number;
  /**
   * 의약품 이름
   * @type {string}
   * @memberof FavoriteRes
   */
  medicineName: string;
  /**
   * 제약회사 이름
   * @type {string}
   * @memberof FavoriteRes
   */
  medicineCompany: string;
  /**
   * 의약품 이미지 주소
   * @type {string}
   * @memberof FavoriteRes
   */
  medicineImage: string;
  /**
   * 즐겨찾기 추가 시간
   * @type {string}
   * @memberof FavoriteRes
   */
  createdAt: string;
}
/**
 *
 * @export
 * @interface MedicineRes
 */
export interface MedicineRes {
  /**
   * 의약품의 id
   * @type {number}
   * @memberof MedicineRes
   */
  id: number;
  /**
   * 의약품의 code
   * @type {string}
   * @memberof MedicineRes
   */
  code: string;
  /**
   * 의약품의 이름
   * @type {string}
   * @memberof MedicineRes
   */
  name: string;
  /**
   * 의약품의 제약회사
   * @type {string}
   * @memberof MedicineRes
   */
  company: string;
  /**
   * 의약품의 성분
   * @type {Array<string>}
   * @memberof MedicineRes
   */
  ingredient: Array<string>;
  /**
   * 의약품 이미지 주소
   * @type {string}
   * @memberof MedicineRes
   */
  image: string;
  /**
   * 의약품의 효능
   * @type {string}
   * @memberof MedicineRes
   */
  effect: string;
  /**
   * 의약품의 용법
   * @type {string}
   * @memberof MedicineRes
   */
  usages: string;
  /**
   * 의약품의 주의사항
   * @type {string}
   * @memberof MedicineRes
   */
  precautions: string;
  favorite: boolean;
}
/**
 * 검색결과
 * @export
 * @interface MedicineSearch
 */
export interface MedicineSearch {
  /**
   * 의약품의 id
   * @type {number}
   * @memberof MedicineSearch
   */
  id: number;
  /**
   * 의약품의 이름
   * @type {string}
   * @memberof MedicineSearch
   */
  name: string;
  /**
   * 제약회사
   * @type {string}
   * @memberof MedicineSearch
   */
  company: string;
  /**
   * 의약품 이미지 주소
   * @type {string}
   * @memberof MedicineSearch
   */
  image: string;
}
/**
 *
 * @export
 * @interface MedicineSearchPageRes
 */
export interface MedicineSearchPageRes {
  /**
   * 전체 검색기록 개수
   * @type {number}
   * @memberof MedicineSearchPageRes
   */
  total?: number;
  /**
   * 전체 페이지 개수
   * @type {number}
   * @memberof MedicineSearchPageRes
   */
  totalPage?: number;
  /**
   * 현재 페이지 번호
   * @type {number}
   * @memberof MedicineSearchPageRes
   */
  page: number;
  /**
   * 마지막 페이지 여부
   * @type {boolean}
   * @memberof MedicineSearchPageRes
   */
  lastPage: MedicineSearchPageResLastPageEnum;
  /**
   * 검색결과
   * @type {Array<MedicineSearch>}
   * @memberof MedicineSearchPageRes
   */
  medicineSearchList: Array<MedicineSearch>;
}

export const MedicineSearchPageResLastPageEnum = {
  True: true,
  False: false,
} as const;

export type MedicineSearchPageResLastPageEnum =
  (typeof MedicineSearchPageResLastPageEnum)[keyof typeof MedicineSearchPageResLastPageEnum];

/**
 *
 * @export
 * @interface MyPageRes
 */
export interface MyPageRes {
  /**
   * 회원 이름
   * @type {string}
   * @memberof MyPageRes
   */
  memberName?: string;
  /**
   * 촬영기록 개수
   * @type {number}
   * @memberof MyPageRes
   */
  detectionLogCount?: number;
  /**
   * 즐겨찾기 개수
   * @type {number}
   * @memberof MyPageRes
   */
  favoriteCount?: number;
  picture?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 로그인한 회원을 탈퇴시킵니다.
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/members`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 특정 id의 의약품을 즐겨찾기에서 삭제합니다.
     * @summary 특정 의약품을 즐겨찾기에서 삭제
     * @param {number} favoriteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1: async (favoriteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'favoriteId' is not null or undefined
      assertParamExists("delete1", "favoriteId", favoriteId);
      const localVarPath = `/favorites`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (favoriteId !== undefined) {
        localVarQueryParameter["favoriteId"] = favoriteId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 특정 id의 촬영기록을 삭제합니다.
     * @summary 촬영기록 단일 삭제.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete2: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("delete2", "id", id);
      const localVarPath = `/detection-logs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 로그인한 사용자의 즐겨찾기를 모두 삭제합니다.
     * @summary 즐겨찾기 전체 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/favorites/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 전체 촬영기록을 삭제합니다.
     * @summary 촬영기록 전체 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAll1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/detection-logs/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * list에 저장되어 있는 검색기록중 특정 index에 존재하는 검색기록을 삭제합니다.
     * @summary 특정 의약품 검색기록 삭제
     * @param {string} name
     * @param {string} createdAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLog: async (
      name: string,
      createdAt: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("deleteLog", "name", name);
      // verify required parameter 'createdAt' is not null or undefined
      assertParamExists("deleteLog", "createdAt", createdAt);
      const localVarPath = `/medicines/search/logs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (createdAt !== undefined) {
        localVarQueryParameter["createdAt"] = createdAt;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 전체 의약품 검색기록을 삭제합니다.
     * @summary 전체 의약품 검색기록 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLogs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/medicines/search/logs/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 의약품 사진을 전송하고 결과를 받을 때까지 대기합니다.
     * @summary 의약품 사진을 전송합니다.
     * @param {File} image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detect: async (image: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'image' is not null or undefined
      assertParamExists("detect", "image", image);
      const localVarPath = `/detection`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

      if (image !== undefined) {
        localVarFormParams.append("image", image as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 특정 페이지의 촬영기록을 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
     * @summary 촬영기록 조회(페이징 적용)
     * @param {'ASCENDING' | 'DESCENDING'} order
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDetectionLogsByPage: async (
      order: "ASCENDING" | "DESCENDING",
      page: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'order' is not null or undefined
      assertParamExists("getDetectionLogsByPage", "order", order);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getDetectionLogsByPage", "page", page);
      const localVarPath = `/detection-logs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 특정 페이지의 즐겨찾기를 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
     * @summary 즐겨찾기 조회(페이징 적용)
     * @param {'ASCENDING' | 'DESCENDING'} order
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoritesByPage: async (
      order: "ASCENDING" | "DESCENDING",
      page: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'order' is not null or undefined
      assertParamExists("getFavoritesByPage", "order", order);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getFavoritesByPage", "page", page);
      const localVarPath = `/favorites`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 의약품 고유값인 code를 이용하여 의약품 정보를 조회합니다.
     * @summary 의약품 code를 이용하여 의약품 정보 조회
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineByCode: async (
      code: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'code' is not null or undefined
      assertParamExists("getMedicineByCode", "code", code);
      const localVarPath = `/medicines/code/{code}`.replace(
        `{${"code"}}`,
        encodeURIComponent(String(code)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * RDB의 primary key인 id를 통해 의약품 정보를 조회합니다.
     * @summary DB의 id를 이용하여 의약품 정보 조회
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMedicineById", "id", id);
      const localVarPath = `/medicines/id/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 의약품 검색어와 연관도가 높은 검색어를 최대 PAGE_SIZE만큼 반환합니다.
     * @summary 의약품 연관검색어 조회
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineNamesByKeyword: async (
      name: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getMedicineNamesByKeyword", "name", name);
      const localVarPath = `/medicines/search/related`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 의약품 최근 검색기록을 RECENT_KEYWORD_SIZE만큼 반환합니다.
     * @summary 의약품 최근 검색기록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineSearchLogs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/medicines/search/logs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 의약품 검색을 통해 첫번째 페이지를 반환 받은 후 추가적인 검색기록을 확인하기 위해서 사용합니다. 이 때는 검색기록에 추가되지 않습니다.
     * @summary 의약품 검색 후 다른 결과 페이지 조회
     * @param {string} name
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicinesByNameAndPage: async (
      name: string,
      page: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getMedicinesByNameAndPage", "name", name);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getMedicinesByNameAndPage", "page", page);
      const localVarPath = `/medicines/search/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 로그인한 사용자의 마이페이지에 출력할 데이터들을 조회합니다.
     * @summary 마이페이지 출력 데이터 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyPage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/my-page/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 특정 의약품의 id를 이용하여 즐겨찾기에 의약품을 추가합니다.
     * @summary 특정 의약품을 즐겨찾기에 추가
     * @param {number} medicineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save: async (medicineId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'medicineId' is not null or undefined
      assertParamExists("save", "medicineId", medicineId);
      const localVarPath = `/favorites`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (medicineId !== undefined) {
        localVarQueryParameter["medicineId"] = medicineId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 최근검색어를 추가합니다.
     * @summary 최근검색어 추가
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveSearchLog: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("saveSearchLog", "name", name);
      const localVarPath = `/medicines/search/logs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * 로그인한 회원을 탈퇴시킵니다.
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 특정 id의 의약품을 즐겨찾기에서 삭제합니다.
     * @summary 특정 의약품을 즐겨찾기에서 삭제
     * @param {number} favoriteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delete1(
      favoriteId: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(favoriteId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 특정 id의 촬영기록을 삭제합니다.
     * @summary 촬영기록 단일 삭제.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delete2(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.delete2(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 로그인한 사용자의 즐겨찾기를 모두 삭제합니다.
     * @summary 즐겨찾기 전체 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAll(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 전체 촬영기록을 삭제합니다.
     * @summary 촬영기록 전체 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAll1(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll1(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * list에 저장되어 있는 검색기록중 특정 index에 존재하는 검색기록을 삭제합니다.
     * @summary 특정 의약품 검색기록 삭제
     * @param {string} name
     * @param {string} createdAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLog(
      name: string,
      createdAt: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLog(name, createdAt, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 전체 의약품 검색기록을 삭제합니다.
     * @summary 전체 의약품 검색기록 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLogs(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLogs(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 의약품 사진을 전송하고 결과를 받을 때까지 대기합니다.
     * @summary 의약품 사진을 전송합니다.
     * @param {File} image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async detect(
      image: File,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicineRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.detect(image, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 특정 페이지의 촬영기록을 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
     * @summary 촬영기록 조회(페이징 적용)
     * @param {'ASCENDING' | 'DESCENDING'} order
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDetectionLogsByPage(
      order: "ASCENDING" | "DESCENDING",
      page: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetectionLogPageRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDetectionLogsByPage(
        order,
        page,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 특정 페이지의 즐겨찾기를 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
     * @summary 즐겨찾기 조회(페이징 적용)
     * @param {'ASCENDING' | 'DESCENDING'} order
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFavoritesByPage(
      order: "ASCENDING" | "DESCENDING",
      page: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FavoritePageRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFavoritesByPage(
        order,
        page,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 의약품 고유값인 code를 이용하여 의약품 정보를 조회합니다.
     * @summary 의약품 code를 이용하여 의약품 정보 조회
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMedicineByCode(
      code: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicineRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMedicineByCode(code, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * RDB의 primary key인 id를 통해 의약품 정보를 조회합니다.
     * @summary DB의 id를 이용하여 의약품 정보 조회
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMedicineById(
      id: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicineRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMedicineById(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 의약품 검색어와 연관도가 높은 검색어를 최대 PAGE_SIZE만큼 반환합니다.
     * @summary 의약품 연관검색어 조회
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMedicineNamesByKeyword(
      name: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMedicineNamesByKeyword(
        name,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 의약품 최근 검색기록을 RECENT_KEYWORD_SIZE만큼 반환합니다.
     * @summary 의약품 최근 검색기록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMedicineSearchLogs(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMedicineSearchLogs(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 의약품 검색을 통해 첫번째 페이지를 반환 받은 후 추가적인 검색기록을 확인하기 위해서 사용합니다. 이 때는 검색기록에 추가되지 않습니다.
     * @summary 의약품 검색 후 다른 결과 페이지 조회
     * @param {string} name
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMedicinesByNameAndPage(
      name: string,
      page: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MedicineSearchPageRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMedicinesByNameAndPage(
        name,
        page,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 로그인한 사용자의 마이페이지에 출력할 데이터들을 조회합니다.
     * @summary 마이페이지 출력 데이터 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyPage(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyPageRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMyPage(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 특정 의약품의 id를 이용하여 즐겨찾기에 의약품을 추가합니다.
     * @summary 특정 의약품을 즐겨찾기에 추가
     * @param {number} medicineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async save(
      medicineId: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.save(medicineId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * 최근검색어를 추가합니다.
     * @summary 최근검색어 추가
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async saveSearchLog(
      name: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.saveSearchLog(name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * 로그인한 회원을 탈퇴시킵니다.
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(options?: any): AxiosPromise<string> {
      return localVarFp._delete(options).then((request) => request(axios, basePath));
    },
    /**
     * 특정 id의 의약품을 즐겨찾기에서 삭제합니다.
     * @summary 특정 의약품을 즐겨찾기에서 삭제
     * @param {number} favoriteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(favoriteId: number, options?: any): AxiosPromise<string> {
      return localVarFp.delete1(favoriteId, options).then((request) => request(axios, basePath));
    },
    /**
     * 특정 id의 촬영기록을 삭제합니다.
     * @summary 촬영기록 단일 삭제.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete2(id: number, options?: any): AxiosPromise<string> {
      return localVarFp.delete2(id, options).then((request) => request(axios, basePath));
    },
    /**
     * 로그인한 사용자의 즐겨찾기를 모두 삭제합니다.
     * @summary 즐겨찾기 전체 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAll(options?: any): AxiosPromise<string> {
      return localVarFp.deleteAll(options).then((request) => request(axios, basePath));
    },
    /**
     * 전체 촬영기록을 삭제합니다.
     * @summary 촬영기록 전체 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAll1(options?: any): AxiosPromise<string> {
      return localVarFp.deleteAll1(options).then((request) => request(axios, basePath));
    },
    /**
     * list에 저장되어 있는 검색기록중 특정 index에 존재하는 검색기록을 삭제합니다.
     * @summary 특정 의약품 검색기록 삭제
     * @param {string} name
     * @param {string} createdAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLog(name: string, createdAt: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .deleteLog(name, createdAt, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 전체 의약품 검색기록을 삭제합니다.
     * @summary 전체 의약품 검색기록 삭제
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLogs(options?: any): AxiosPromise<string> {
      return localVarFp.deleteLogs(options).then((request) => request(axios, basePath));
    },
    /**
     * 의약품 사진을 전송하고 결과를 받을 때까지 대기합니다.
     * @summary 의약품 사진을 전송합니다.
     * @param {File} image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detect(image: File, options?: any): AxiosPromise<MedicineRes> {
      return localVarFp.detect(image, options).then((request) => request(axios, basePath));
    },
    /**
     * 특정 페이지의 촬영기록을 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
     * @summary 촬영기록 조회(페이징 적용)
     * @param {'ASCENDING' | 'DESCENDING'} order
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDetectionLogsByPage(
      order: "ASCENDING" | "DESCENDING",
      page: number,
      options?: any,
    ): AxiosPromise<DetectionLogPageRes> {
      return localVarFp
        .getDetectionLogsByPage(order, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 특정 페이지의 즐겨찾기를 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
     * @summary 즐겨찾기 조회(페이징 적용)
     * @param {'ASCENDING' | 'DESCENDING'} order
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoritesByPage(
      order: "ASCENDING" | "DESCENDING",
      page: number,
      options?: any,
    ): AxiosPromise<FavoritePageRes> {
      return localVarFp
        .getFavoritesByPage(order, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 의약품 고유값인 code를 이용하여 의약품 정보를 조회합니다.
     * @summary 의약품 code를 이용하여 의약품 정보 조회
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineByCode(code: string, options?: any): AxiosPromise<MedicineRes> {
      return localVarFp
        .getMedicineByCode(code, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * RDB의 primary key인 id를 통해 의약품 정보를 조회합니다.
     * @summary DB의 id를 이용하여 의약품 정보 조회
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineById(id: number, options?: any): AxiosPromise<MedicineRes> {
      return localVarFp.getMedicineById(id, options).then((request) => request(axios, basePath));
    },
    /**
     * 의약품 검색어와 연관도가 높은 검색어를 최대 PAGE_SIZE만큼 반환합니다.
     * @summary 의약품 연관검색어 조회
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineNamesByKeyword(name: string, options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .getMedicineNamesByKeyword(name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 의약품 최근 검색기록을 RECENT_KEYWORD_SIZE만큼 반환합니다.
     * @summary 의약품 최근 검색기록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicineSearchLogs(options?: any): AxiosPromise<string> {
      return localVarFp.getMedicineSearchLogs(options).then((request) => request(axios, basePath));
    },
    /**
     * 의약품 검색을 통해 첫번째 페이지를 반환 받은 후 추가적인 검색기록을 확인하기 위해서 사용합니다. 이 때는 검색기록에 추가되지 않습니다.
     * @summary 의약품 검색 후 다른 결과 페이지 조회
     * @param {string} name
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedicinesByNameAndPage(
      name: string,
      page: number,
      options?: any,
    ): AxiosPromise<MedicineSearchPageRes> {
      return localVarFp
        .getMedicinesByNameAndPage(name, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 로그인한 사용자의 마이페이지에 출력할 데이터들을 조회합니다.
     * @summary 마이페이지 출력 데이터 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyPage(options?: any): AxiosPromise<MyPageRes> {
      return localVarFp.getMyPage(options).then((request) => request(axios, basePath));
    },
    /**
     * 특정 의약품의 id를 이용하여 즐겨찾기에 의약품을 추가합니다.
     * @summary 특정 의약품을 즐겨찾기에 추가
     * @param {number} medicineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save(medicineId: number, options?: any): AxiosPromise<string> {
      return localVarFp.save(medicineId, options).then((request) => request(axios, basePath));
    },
    /**
     * 최근검색어를 추가합니다.
     * @summary 최근검색어 추가
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveSearchLog(name: string, options?: any): AxiosPromise<void> {
      return localVarFp.saveSearchLog(name, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * 로그인한 회원을 탈퇴시킵니다.
   * @summary 회원 탈퇴
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public _delete(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      ._delete(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 특정 id의 의약품을 즐겨찾기에서 삭제합니다.
   * @summary 특정 의약품을 즐겨찾기에서 삭제
   * @param {number} favoriteId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public delete1(favoriteId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .delete1(favoriteId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 특정 id의 촬영기록을 삭제합니다.
   * @summary 촬영기록 단일 삭제.
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public delete2(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .delete2(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 로그인한 사용자의 즐겨찾기를 모두 삭제합니다.
   * @summary 즐겨찾기 전체 삭제
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteAll(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 전체 촬영기록을 삭제합니다.
   * @summary 촬영기록 전체 삭제
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteAll1(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteAll1(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * list에 저장되어 있는 검색기록중 특정 index에 존재하는 검색기록을 삭제합니다.
   * @summary 특정 의약품 검색기록 삭제
   * @param {string} name
   * @param {string} createdAt
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteLog(name: string, createdAt: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteLog(name, createdAt, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 전체 의약품 검색기록을 삭제합니다.
   * @summary 전체 의약품 검색기록 삭제
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteLogs(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteLogs(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 의약품 사진을 전송하고 결과를 받을 때까지 대기합니다.
   * @summary 의약품 사진을 전송합니다.
   * @param {File} image
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public detect(image: File, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .detect(image, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 특정 페이지의 촬영기록을 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
   * @summary 촬영기록 조회(페이징 적용)
   * @param {'ASCENDING' | 'DESCENDING'} order
   * @param {number} page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getDetectionLogsByPage(
    order: "ASCENDING" | "DESCENDING",
    page: number,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .getDetectionLogsByPage(order, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 특정 페이지의 즐겨찾기를 조회합니다. 이 때 order에 \"ASCENDING\", \"DESCENDING\"을 입력하여 정렬기준을 변경할 수 있습니다.
   * @summary 즐겨찾기 조회(페이징 적용)
   * @param {'ASCENDING' | 'DESCENDING'} order
   * @param {number} page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getFavoritesByPage(
    order: "ASCENDING" | "DESCENDING",
    page: number,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .getFavoritesByPage(order, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 의약품 고유값인 code를 이용하여 의약품 정보를 조회합니다.
   * @summary 의약품 code를 이용하여 의약품 정보 조회
   * @param {string} code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMedicineByCode(code: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMedicineByCode(code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * RDB의 primary key인 id를 통해 의약품 정보를 조회합니다.
   * @summary DB의 id를 이용하여 의약품 정보 조회
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMedicineById(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMedicineById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 의약품 검색어와 연관도가 높은 검색어를 최대 PAGE_SIZE만큼 반환합니다.
   * @summary 의약품 연관검색어 조회
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMedicineNamesByKeyword(name: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMedicineNamesByKeyword(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 의약품 최근 검색기록을 RECENT_KEYWORD_SIZE만큼 반환합니다.
   * @summary 의약품 최근 검색기록 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMedicineSearchLogs(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMedicineSearchLogs(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 의약품 검색을 통해 첫번째 페이지를 반환 받은 후 추가적인 검색기록을 확인하기 위해서 사용합니다. 이 때는 검색기록에 추가되지 않습니다.
   * @summary 의약품 검색 후 다른 결과 페이지 조회
   * @param {string} name
   * @param {number} page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMedicinesByNameAndPage(name: string, page: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMedicinesByNameAndPage(name, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 로그인한 사용자의 마이페이지에 출력할 데이터들을 조회합니다.
   * @summary 마이페이지 출력 데이터 조회
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMyPage(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMyPage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 특정 의약품의 id를 이용하여 즐겨찾기에 의약품을 추가합니다.
   * @summary 특정 의약품을 즐겨찾기에 추가
   * @param {number} medicineId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public save(medicineId: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .save(medicineId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 최근검색어를 추가합니다.
   * @summary 최근검색어 추가
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public saveSearchLog(name: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .saveSearchLog(name, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
